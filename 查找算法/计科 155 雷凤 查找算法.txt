//顺序查找算法实现
#include<iostream>
using namespace std;
int Seqserach(int num,int vaule)
{
    int i, array[20];
	cout<<"数组元素:"<<endl;
	for(i =0;i<num;i++)
	cin>>array[i];
    for(i =0;i<num;i++)
	{
		if(array[i] == vaule)
		cout<<vaule<<endl;
	}
	if(i >= num) return -1;
}
int main()
{
	int num, vaule;
	cout<<"数组元素个数:"<<endl;
	cin>>num;
	cout<<"关键字:"<<endl;
	cin>>vaule;
	if(Seqserach(num,vaule) != -1)
	cout<<vaule<<endl;
    return 0;	
}

//二分查找算法实现
#include<iostream>
using namespace std;
int Binsearch(int r[],int n, int key)
{
	int mid, low = 1, high = n;
	while(low < high)
	{
		mid = (low + high)/2;
		if(r[mid] > key) high = mid-1;
		else if(r[mid] < key) low = mid+1;
		else return mid;//查找成功 返回元素序号
	}
	return 0;//查找失败返回0;
}
int Binsearch2(int r[],int n,int key)
{
	int low = 1, high = n;
    if(low > high) return 0; //递归的边界条件
	else
	{
		int mid = (low + high)/2;
		if(r[mid] > key) return Binsearch2(r,n,key);
		else if(r[mid] < key) return Binsearch2(r,n,key);
		else return mid;
	}
}
int main()
{
	int n ,key, r[20];
	cout<<"数组个数:"<<endl;
	cin>>n;
	cout<<"数组元素:"<<endl;
	for(int i =0;i<n;i++)
	cin>>r[i];
	cout<<"查找关键词:"<<endl;
	cin>>key;
	int mid = Binsearch(r,n,key);
	cout<<"该关键字序号是"<<mid<<endl;
	int j = Binsearch(r,n,key);
	cout<<"递归算法该关键词的序号是:"<<j<<endl;
	return 0;
}

//分块查找及二分查找与顺序查找的结合优化
//先进行序列的分块然后对每个分块的序列进行顺序查找
#include<iostream>
#include<fstream>
#include<string>
using namespace std;
struct EylmType
{
	int max;
	int start;
	int end;
}EylmType[4];
int Browsearch(int value,int Index[])
{
	ofstream out;
    int i = 0, j ; //注意i的初始化!
	while((i<=2) && (EylmType[i].max <value))
	i++;
	if(i > 2) return -1;
	j = EylmType[i].start; 
	while(j <= EylmType[i].end && Index[j] != value)
	j++;
	return j ;
	if(j > EylmType[i].end) 
	j = -1;
}

int main()
{
	int i, j = 0, value; //注意j的初始化!
	ifstream in("test.txt");
	int Index[] = {1,4,3,2,5,6,9,7,8,10,11,12,13};
	cout<<"有一数组:"<<endl;
	for(i =0;i<13;i++)
	cout<<Index[i]<<' ';
	cout<<endl;
	for(i = 0;i<3;i++)
    {
    EylmType[i].start = j;
	j = j+4;
    EylmType[i].end = j;
	EylmType[i].max = Index[j];
	j++;
	}
	cout<<"输入关键字:"<<endl;
	cin>>value;
	int k = Browsearch(value, Index);
    if(k != -1)
	cout<<"您要查找的关键字位置为:"<<k<<endl;
	else 
	cout<<"查找失败"<<endl;
	return 0;
}

#include<iostream>
using namespace std;
struct BiNode
{
     char data;
	 BiNode *lchild,*rchild;
};
class BiTree
{
public:
	BiTree(){ count =0; root =Creat(root);}//构造函数
	~BiTree(){Release(root);}        //析构函数
	void PreOrder(){PreOrder(root);}//前序遍历
	void InOrder(){InOrder(root);} //中序遍历
	void PostOrder(){PostOrder(root);}//后序遍历
	void LeverOrder();     //层序遍历
	int HowData(){HowData(root);return count;}//打印叶子节点数
	int Dapth(){return Dapth(root);}//打印树深度
	int Complate(){Complate(root); return count;}//判断是否为完全二叉树
	char PerentData(char x){ char temp = PerentData(root,x); return temp;}//打印双亲结点
private:
	int count;
	BiNode *root;
	BiNode *Creat(BiNode *bt);
	void Release(BiNode *bt);
	void PreOrder(BiNode *bt);
	void InOrder(BiNode *bt);
	void PostOrder(BiNode *bt);
	int HowData(BiNode *bt);
	int Dapth(BiNode *bt);
	int Complate(BiNode *bt);
	char PerentData(BiNode *bt,char x);
};
            //构造函数
BiNode *BiTree::Creat(BiNode *bt)
{
	char ch;
	cin>>ch;
	if(ch =='#') bt =NULL;
	else
	{
		bt =new BiNode; bt->data =ch;
		bt->lchild =Creat(bt->lchild);
		bt->rchild =Creat(bt->rchild);
	}
	return bt;
}
          //析构函数
void BiTree::Release(BiNode *bt)
{
	if(bt !=NULL)
	{
		Release(bt->lchild);
		Release(bt->rchild);
		delete bt;
	}
}
             //前序遍历
void BiTree::PreOrder(BiNode *bt)
{
	if(bt ==NULL) return ;
	else
	{
		cout<<bt->data;
		PreOrder(bt->lchild);
		PreOrder(bt->rchild);
	}
}
           //中序遍历
void BiTree::InOrder(BiNode *bt)
{
	if(bt ==NULL) return ;
	else
	{
		InOrder(bt->lchild);
		cout<<bt->data;
		InOrder(bt->rchild);
	}
}
            //后续遍历
void BiTree::PostOrder(BiNode *bt)
{
	if(bt ==NULL) return ;
	else
	{
		PostOrder(bt->lchild);
		PostOrder(bt->rchild);
		cout<<bt->data;
	}
}
              //层序遍历
void BiTree::LeverOrder()
{
	BiNode *Q[100];
	BiNode *q;
	int front =0;
	int rear =0;
	if(root ==NULL)
	{
		cout<<"None"<<endl;
		return ;
	}
	Q[++rear] =root;
	while(front !=rear)
	{
		q =Q[++front];
		cout<<q->data;
		if(q->lchild !=NULL) Q[++rear] =q->lchild;
		if(q->rchild !=NULL) Q[++rear] =q->rchild;
	}

}
          //打印叶子节点数
int BiTree::HowData(BiNode *bt)
{
	if(bt !=NULL)
    {
		if((bt->lchild ==NULL )&&(bt->rchild ==NULL))
		{
			count++;  
			cout<<bt->data;
		}
		HowData(bt->lchild);
        HowData(bt->rchild);		
	}
   return count;
}
            //打印深度
int BiTree::Dapth(BiNode *bt)
{
    int lh,rh,max;
	if(bt ==NULL) return 0;
	else
    {
		lh =Dapth(bt->lchild);
		rh =Dapth(bt->rchild);
		max =lh >rh? lh:rh;
		return (max+1);
	}	
}
            //判断是否为完全二叉树
int BiTree::Complate(BiNode *bt)
{
	int const MaxSize =100;
	int front =-1;
	int rear =-1;
	int x =1,y =1;
	BiNode *q;
	BiNode *Q[MaxSize];
	if(root ==NULL) return 0;
		Q[++rear] =root;
	while(front !=rear)
	{
	   q =Q[++front];
	   if(bt->lchild ==NULL)
	   {
		   x =0;//标记
		   if(bt->rchild !=NULL)
			 y =0;
	   }
	   else
	   {
		   y = x;
           Q[++rear] =bt->lchild;
		   if(bt->rchild ==NULL) x =0;
		   else
		   {
			   Q[++rear] =bt->rchild;
		   }
        return y;
	   }
	  
	}
return 1;
}

            //打印双亲结点
char BiTree::PerentData(BiNode *bt,char x)
{ 
	char temp;
	if(root ==NULL) { cout<<"NULL"<<endl;return NULL;}
	if(root->data ==x) {cout<<"NULL"<<endl;return NULL;}
   if(bt !=NULL)
   {
	   if((bt->lchild !=NULL && bt->lchild->data ==x) ||
          ( bt->rchild !=NULL && bt->rchild->data ==x))
		  return bt->data;
	   if(bt->lchild !=NULL)
		   temp = PerentData(bt->lchild,x);//必须递归返回一个值方可输出
	   if(bt->rchild !=NULL) 
		   temp =PerentData(bt->rchild,x);
   }
   return temp;
}

int main()
{
	BiTree tree;
	cout<<"前序遍历:"<<endl;
	tree.PreOrder(); cout<<endl;
	cout<<"中序遍历:"<<endl;
	tree.InOrder(); cout<<endl;
	cout<<"后序遍历:"<<endl;
	tree.PostOrder(); cout<<endl;
	cout<<"层序遍历:"<<endl;
	tree.LeverOrder(); cout<<endl;
	int count =tree.HowData();	
   	cout<<endl;
    cout<<"叶子节点个数:"<<count<<endl;
	int num =1;
	num =tree.Dapth();
   	cout<<"树的深度:"<<num<<endl;
	int len =tree.Complate();
	if(len) 
		cout<<"此为完全二叉树"<<endl;
	else  
		cout<<"此为非完全二叉树"<<endl;
	cout<<"输入结点:"<<endl;
	char x;
	cin>>x;
	char temp =tree.PerentData(x);
	cout<<"其双亲结点:"<<temp<<endl;
	return 0;
}