#include<iostream>
#include<cstring>
#define LETTER_MAX 26
#define STRING_MAX 100
using namespace std;

struct Element
{
    int weight;
    char letter;
    int lchild,rchild,parent;
};

int num[LETTER_MAX]= {0};//初步记录字母频率
Element huffTree[2*LETTER_MAX-1];//哈夫曼树
char str[STRING_MAX];//输入的字符串
char coder[LETTER_MAX][STRING_MAX]={{0}};//编码表
char letter[LETTER_MAX]={0};//字母表
char tempCoder[STRING_MAX]={0};
char Encode[STRING_MAX]={0};//编码后的字符串
char Decode[STRING_MAX]={0};//解码后的字符串
int letterNum;
int codeNum=0;

void computeWeight()//根据字符出现频率计算权值
{
    int i;
    for (i=0; str[i]!=0; i++)
        num[str[i]-'a']++;
}

int searchLeast(int n,int min)//查找权值最小根节点序号
{
    int least=-1;
    int i;
    for (i=0; i<n; i++)
    {
        if (i==min)
            continue;
        if (huffTree[i].parent==-1)
        {
            if (least==-1)
                least=i;
            if (huffTree[least].weight>huffTree[i].weight)
                least=i;
        }
    }
    return least;
}

int HuffmanTree()//初始化哈夫曼树
{
    int letterNum=0;
    int i,i1,i2;
    for (i=0; i<LETTER_MAX; i++)
    {
        if (num[i]>0)
        {
            huffTree[letterNum].weight=num[i];
            huffTree[letterNum].letter=i+'a';
            huffTree[letterNum].parent=-1;
            huffTree[letterNum].lchild=-1;
            huffTree[letterNum].rchild=-1;
            letterNum++;
        }
    }
    for (i=0; i<letterNum-1; i++)
    {
        i1=searchLeast(letterNum+i,-1);
        i2=searchLeast(letterNum+i,i1);

        huffTree[i1].parent=letterNum+i;
        huffTree[i2].parent=letterNum+i;
        huffTree[letterNum+i].parent=-1;
        huffTree[letterNum+i].lchild=i1;
        huffTree[letterNum+i].rchild=i2;
        huffTree[letterNum+i].weight=huffTree[i1].weight+huffTree[i2].weight;
    }
    return letterNum;
}

void encode(int index,char code,int len)//对单个字符进行对应编码
{
    if (index==-1)
        return;
    tempCoder[len++]=code;
    if (huffTree[index].lchild==-1 && huffTree[index].rchild==-1)
    {
        tempCoder[len]=0;
        strcpy(coder[codeNum],tempCoder);
        letter[codeNum]=huffTree[index].letter;
        codeNum++;
        return;
    }
    encode(huffTree[index].lchild,'0',len);
    encode(huffTree[index].rchild,'1',len);
}

void encode()//对字符串编码
{
    encode(huffTree[2*letterNum-2].lchild,'0',0);
    encode(huffTree[2*letterNum-2].rchild,'1',0);

    int i,j;
    for (i=0;str[i]!=0;i++)
    {
        for (j=0;j<letterNum;j++)
        {
            if (str[i]==letter[j])
                strcat(Encode,coder[j]);
        }
    }
}

void decode()//对编码后的字符串进行解码
{
    int i,j,k;
    int num=0;
    for (i=0;Encode[i]!=0;)
    {
        j=0;
        while(1)
        {
            tempCoder[j++]=Encode[i++];
            tempCoder[j]=0;
            for (k=0;k<letterNum;k++)
                if (strcmp(tempCoder,coder[k])==0)
                {
                    Decode[num++]=letter[k];
                    //cout<<tempCoder<<endl;
                    break;
                }
            if (k!=letterNum)
                break;
        }
    }
    Decode[num]=0;
}

int main()
{
    cout<<"请输入小写字符串"<<endl;
    cin.getline(str,STRING_MAX);
    computeWeight();
    letterNum=HuffmanTree();

    encode();

    cout<<endl<<"字符对应编码"<<endl;
    for (int i=0;i<codeNum;i++)
    cout<<letter[i]<<' '<<coder[i]<<endl;

    cout<<endl<<"编码后"<<'\t'<<Encode<<endl;
    decode();
    cout<<"解码后"<<'\t'<<Decode<<endl;


    return 0;
}
