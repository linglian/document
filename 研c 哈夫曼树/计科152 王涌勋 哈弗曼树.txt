#include<iostream>
#include<string>
#include<cstring>
using namespace std;

struct element
{
	int weight;
	int lchild, rchild, parent;
};

struct huffmancode
{
	int weight;
	char word;
	char code[6];
};

void select(element huffTree[], int& i1, int& i2);
void HuffmanTree(element huffTree[], int w[], int n);
int main()
{
	int word[30] = { 0 };//设定整型数组保存权值
	int n;//保存输入字符串长度
	int i, j;
	string sentence;
	cin >> sentence;
	n = sentence.size();
	char *s = new char[n];//建立字符数组方便查找
	strcpy(s, sentence.data());//将输入字符串转换为字符数组
	for (j = 0; j < 30; j++)
	{
		for (i = 0; i < n; i++)
		{
			if (s[i] == j + 97)//s数组中的序号代表英文字母 即 s[1]表示a的频度 依次类推
				word[j + 1]++;
		}
	}
	int weightl = 0;//w[]的长度
	for (i = 0; i < 30; i++)
	{
		if (word[i] != 0)
			weightl++;//保存不为0的频度
	}
	int* w = new int[weightl];//保存有效频度
	for (i = 0, j = 0; i < 30; i++)
	{
		if (word[i] != 0)
			w[j++] = word[i];
	}

	huffmancode *Code = new huffmancode[weightl];//编码类型 


	for (int j = 0, i = 0; j < 30; j++)//初始化编码
	{
		if (word[j] != 0)
		{
			char c = j + 96;
			Code[i].word = c;
			Code[i].weight = word[j];
			strcpy(Code[i].code, "0");
			i++;
		}
	}
	element* huffTree = new element[2 * weightl - 1];

	HuffmanTree(huffTree, w, weightl);

	for (i = 0; i < 2 * weightl - 1; i++)
	{
		int q = 0, p;
		if (huffTree[i].lchild == -1 && huffTree[i].rchild == -1)
		{
			p = i;
			while (p != -1)
			{
				if (huffTree[ huffTree[p].parent ].lchild == p)
					Code[i].code[q] = '0';
				else
					Code[i].code[q] = '1';
				q++;
				p = huffTree[p].parent;
			}
			Code[i].code[q-1] = '\0';
		}
	}
	cout << "编码 权值 字符" << endl;
	for (i = 0; i < weightl; i++)
	{
		cout << Code[i].code << "  " << Code[i].weight << "  " << Code[i].word << endl;
	}
	return 0;
}

void HuffmanTree(element huffTree[], int w[], int n)//huffTree 节点集合 w权值集合  n叶子个数
{
	int i, k, i1 = 0, i2 = 0;

	for (i = 0; i < 2 * n - 1; i++)
	{
		huffTree[i].weight = 0;
		huffTree[i].parent = -1;
		huffTree[i].lchild = -1;
		huffTree[i].rchild = -1;
	}
	for (i = 0; i < n; i++)
		huffTree[i].weight = w[i];
	for (k = n; k < 2 * n - 1; k++)
	{
		select(huffTree, i1, i2);
		huffTree[i1].parent = k;
		huffTree[i2].parent = k;
		huffTree[k].weight = huffTree[i1].weight + huffTree[i2].weight;
		huffTree[k].lchild = i1;
		huffTree[k].rchild = i2;
	}
}

void select(element huffTree[], int& i1, int& i2)
{
	int n = 10000, m = 10000;
	int i = 0;
	for (i = 0; huffTree[i].weight != 0; i++)
	{
		if (huffTree[i].weight < n && huffTree[i].parent == -1)
		{
			i1 = i;
			n = huffTree[i1].weight;
		}
		else if (huffTree[i].weight < m && huffTree[i].parent == -1)
		{
			i2 = i;
			m = huffTree[i2].weight;
		}
	}
}