import java.util.Scanner;

/**
 *  Compilation:  javac ThreadedBinaryTree.java
 *  Execution:    java ThreadedBinaryTree
 *  Dependencies: Queue.java (can simply change to ArrayList or any Iterable)
 *
 *  A threaded binary tree (a binary tree variant that allows fast traversal: given a pointer to a node in a threaded
 *  tree, it is possible to cheaply find its in-order successor (and/or predecessor)) with double threaded (each node is
 *  threaded towards both the in-order predecessor and successor (left and right)). --Wikipedia
 *
 *  % more tinyTBT.txt
 *  6 8 7 3 1 5 11 9 13
 *
 *  % java ThreadedBinaryTree < tinyTBT.txt
 *  Leaves: 0 Height: 0 Complete: true
 *  Leaves: 1 Height: 1 Complete: true	6
 *  Leaves: 1 Height: 2 Complete: false	6 8
 *  Leaves: 1 Height: 3 Complete: false	6 7 8
 *  Leaves: 2 Height: 3 Complete: false	3 6 7 8
 *  Leaves: 2 Height: 3 Complete: true	1 3 6 7 8
 *  Leaves: 3 Height: 3 Complete: true	1 3 5 6 7 8
 *  Leaves: 4 Height: 3 Complete: true	1 3 5 6 7 8 11
 *  Leaves: 4 Height: 4 Complete: false	1 3 5 6 7 8 9 11
 *  Leaves: 5 Height: 4 Complete: false	1 3 5 6 7 8 9 11 13
 *
 *  @author Lei
 *  @create 2016/10/18
 */
public class ThreadedBinaryTree<Item extends Comparable<Item>> {
    public Node root;

    private class Node {
        Item item;
        Node left, right;
        boolean leftThread, rightThread;

        public Node(Item item, Node left, Node right) {
            this.item        = item;
            this.left        = left;
            this.right       = right;
            this.leftThread  = left  != null;
            this.rightThread = right != null;
        }

        public Node leftChild()  { return leftThread  ? null : left;  }

        public Node rightChild() { return rightThread ? null : right; }

        public boolean isLeaf() { return leftChild() == null && rightChild() == null; }
    }

    /*
     * Put the specified item into the tree, ignore item if it's already contained.
     *
     * @param item item to put into the tree
     * @throw NullPointerException if {@code item} is {@code null}
     */
    public void put(Item item) {
        if (item == null) throw new NullPointerException("argument to put() is null");
        root = put(item, root, null, null);
    }

    private Node put(Item item, Node node, Node left, Node right) {
        if (node == null) return new Node(item, left, right);
        int compare = item.compareTo(node.item);

        if (compare < 0) {
            node.left  = put(item, node.leftChild(),  left, node);
            node.leftThread  = false;
        }
        else if (compare > 0) {
            node.right = put(item, node.rightChild(), node, right);
            node.rightThread = false;
        }

        return node;
    }

    /*
     * 返回树的高度
     *
     * Return height of this tree
     */
    public int height() { return height(root); }

    private int height(Node node) {
        return node == null ? 0 : 1 + Math.max(height(node.leftChild()), height(node.rightChild()));
    }

    /*
     * 返回叶子数
     *
     * Return number of leaves.
     */
    public int leaves() { return leaves(root); }

    private int leaves(Node node) {
        if (node == null)  return 0;
        if (node.isLeaf()) return 1;
        return leaves(node.leftChild()) + leaves(node.rightChild());
    }

    /*
     * 是否为完全树
     *
     * Does this tree complete?
     */
    public boolean complete() {
        return complete(root);
    }

    private boolean complete(Node node) {
        if (node == null) return true;
        if (node.leftChild()  == null) return node.rightChild() == null;
        if (node.rightChild() == null) return true;

        int cmp = height(node.left) - height(node.right);
        return (cmp == 0 || cmp == 1) && complete(node.leftChild()) && complete(node.rightChild());
    }

    /*
     * 返回双亲
     *
     * Return parent of the specified item
     *
     * @throw NullPointerException if {@code item} is {@code null}
     */
    public Item parent(Item item) {
        if (item == null) throw new NullPointerException("argument to parent() is null");
        Node node = root;
        Node parent = null;

        while (node != null) {
            int compare = item.compareTo(node.item);
            if (compare == 0) break;

            parent = node;
            if (compare < 0) node = node.leftChild();
            else             node = node.rightChild();
        }

        return parent == null ? null :parent.item;
    }

    /*
     * in-order 遍历
     *
     * Returns the items in the tree in in order traversal.
     */
    public Iterable<Item> inorder() {
        Queue<Item> items = new Queue<>();
        Node node = min(root);

        while (node != null) {
            items.enqueue(node.item);
            if (node.rightThread) node = node.right;
            else                  node = min(node.right);
        }

        return items;
    }

    // Return the smallest item roited to {@code node}
    private Node min(Node node) {
        if (node == null) return null;
        while (!node.leftThread && node.left != null) node = node.left;
        return node;
    }

    @Override
    public String toString() {
        StringBuilder s = new StringBuilder();

        s.append("Leaves: "  ).append(leaves())  .append(' ');
        s.append("Height: "  ).append(height())  .append(' ');
        s.append("Complete: ").append(complete()).append('\t');
        for (Item i : inorder()) s.append(i).append(" ");

        return s.toString();
    }

    public static void main(String[] args) {
        ThreadedBinaryTree<Integer> tree = new ThreadedBinaryTree<>();
        Scanner in = new Scanner(System.in);

        System.out.println(tree);
        while (in.hasNextInt()) {
            tree.put(in.nextInt());
            System.out.println(tree);
        }
    }
}
