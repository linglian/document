#include <iostream>
using namespace std;
class ThrNode
{
private:
	char data;
	ThrNode *lchild;
	ThrNode *rchild;
	int ltag;
	int rtag;
public:
	void SetData(char a)
	{
		data = a;
	}
	void SetLchild(ThrNode *p)
	{
		lchild = p;
	}
	void SetRchild(ThrNode *p)
	{
		rchild = p;
	}
	void SetLtag(int p)
	{
		ltag = p;
	}
	void SetRtag(int p)
	{
		rtag= p;
	}
	char GetData()
	{
		return data;
	}
	ThrNode* GetLchild()
	{
		return lchild;
	}
	ThrNode* GetRchild()
	{
		return rchild;
	}
	int GetLtag()
	{
		return ltag;
	}
	int GetRtag()
	{
		return rtag;
	}
};
class InthrBiTree
{
private:
	ThrNode* root;
	ThrNode* pre;
	ThrNode* Creat(ThrNode *bt)
	{
		char ch;
		cin >> ch;
		if (ch == '#')
			bt = NULL;
		else
		{
			bt = new ThrNode();
			bt->SetData(ch);
			bt->SetLtag(0);
			bt->SetRtag(0);
			bt->SetLchild(Creat(bt->GetLchild()));
			bt->SetRchild(Creat(bt->GetRchild()));
		}
		return bt;
	}
	void ThrBiTree(ThrNode* bt)
	{
		if (bt == NULL)
			return;
		ThrBiTree(bt->GetLchild());
		if (bt->GetLchild() == NULL)
		{
			bt->SetLtag(1);
			bt->SetLchild(pre);
		}
		if (bt->GetRchild() == NULL)
		{
			bt->SetRtag(1);
		}
		if (pre!=NULL&&pre->GetRtag() == 1)
		{
			pre->SetRchild(bt);
		}
		pre = bt;
		ThrBiTree(bt->GetRchild());
	}
	int Depth(ThrNode *bt)
	{
		int num=0;
		if (bt == NULL)
			return 0;
		if (bt->GetLchild() != NULL || bt->GetRchild() != NULL)
		{
			if (Depth(bt->GetLchild()) >= Depth(bt->GetRchild()))
				num = Depth(bt->GetLchild()) + 1;
			else
				num = Depth(bt->GetRchild()) + 1;
		}
		else
		{
			return 1;
		}
		return num;
	}
	int  leaves(ThrNode *bt)
	{
		int size;
		if (bt == NULL)
			return 0;
		else
		{
			if (bt->GetLchild() == NULL&&bt->GetRchild() == NULL)
			{
				size = 1;
			}
			else
			{
				size = leaves(bt->GetLchild()) + leaves(bt->GetRchild());
			}
		}
		return size;
	}
public:
	void ThrBiTree()
	{
		pre=NULL;
		ThrBiTree(root);
	}
	int Depth()
	{
		return Depth(root);
	}
	int  leaves()
	{
		return leaves(root);
	}
	ThrNode* parent(char bt)
	{
		ThrNode* a[20], *q;
		int front = -1, rear = -1, k = 0, s = 0;
		a[++rear] = root;
		while (front != rear)
		{

			q = a[++front];
			if (q->GetLchild()!=NULL)
			{
				if (q->GetLchild() ->GetData()== bt)
					return q;
			}
			if (q->GetRchild() != NULL)
			{
				if (q->GetRchild()->GetData() == bt)
					return q;
			}
				if (q->GetLchild() != NULL)
				{
					a[++rear] = q->GetLchild();
				}
				if (q->GetRchild() != NULL)
				{
					a[++rear] = q->GetRchild();
				}
			}
		return NULL;
	}
	int IsComplete()
{
			ThrNode* a[20], *q;
			int front = -1, rear = -1, k = 0, s = 0;
			a[++rear] = root;
			while (front != rear)
			{
				q = a[++front];
				if (q->GetLchild() != NULL||q->GetRchild()!= NULL)
					k = 1;
				if ((q->GetLchild() != NULL || q->GetRchild() != NULL) && k != 0)
					s = 1;
				if (q->GetLchild() == NULL&&q->GetRchild() != NULL)
					s = 1;
				if (q->GetLchild() != NULL)
					a[++rear] = q->GetLchild();
				if (q->GetRchild() != NULL)
					a[++rear] = q->GetRchild();
			}
			if (s == 1)
				return 0;
			else
				return 1;
}
	InthrBiTree()
	{
		root = Creat(root);
	}

	ThrNode * Next(ThrNode* p)
	{
		ThrNode*q;
		if (p->GetRtag() == 1)
		{
			q = p->GetRchild();
		}
		else
		{
			q = p->GetRchild();
			while (q->GetLtag() == 0)
				q = q->GetLchild();
		}
		return q;
	}
	void InOrder()
	{		
		if (root == NULL)
			return;
		ThrNode*p = root;
		while (p->GetLtag() == 0)
		{
			p = p->GetLchild();
		}
		cout << p->GetData()<<" ";
		while (p->GetRchild() != NULL)
		{
			p = Next(p);
			cout << p->GetData()<<" ";
		}
	}
};
int main()
{
	InthrBiTree*a = new InthrBiTree();
	cout << "叶子数:"<<a->leaves()<<endl;
		cout << "深度:" << a->Depth() << endl; 

		if (a->IsComplete() == 0)
			cout << "这颗二叉树不是完全二叉树！" << endl;
		else
			cout << "这颗二叉树是完全二叉树！" << endl;

		cout << "输入要求双亲结点的结点数据：" << endl;
		char b;
		cin >> b;
		if (a->parent(b) == NULL)
			cout << "找不到其双亲结点！" << endl;
		else
		cout <<"该双亲结点数据为："<<a->parent(b)->GetData();

		cout<<"中序线索化输出为："<<endl;
		a->ThrBiTree();
		a->InOrder();
		return 0;

}
