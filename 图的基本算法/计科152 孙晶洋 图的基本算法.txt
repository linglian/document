#include <iostream>
using namespace std;
class Mgraph
{
private:
	int visited[100];
public:
	int vertex[100];
	int arc[100][100];
	int vertexnum, arcnum;
	Mgraph(int a[], int n, int e);
	~Mgraph() {}
	void DFSTraverse(int v);
	void BFSTraverse(int v);
};
struct ArcNode
{
	int adjvex;
	ArcNode *next;
};
struct VertexNode
{
	char vertex;
	int in;
	ArcNode *firstedge;
};
class ALGraph
{
public:
	ALGraph(char a[], int n, int e);
	~ALGraph() {}
	VertexNode adjlist[100];
	int vertexnum, arcnum;
private:
	int visited[100];
};
void Prim(Mgraph G);
void Dijkstra(Mgraph G, int v);
void TopSort(ALGraph G);
struct shortEdge
{
	int lowcost;
	int adjvex;
};
int MinEdge(struct shortEdge s[], int n);
int main()
{
	int n, e;
	cin >> n >> e;
	int a[100];
	for (int i = 0; i < n; i++)
	{
		cin >> a[i];
	}
	Mgraph st(a, n, e);
	st.BFSTraverse(0);
	cout << endl;
	st.DFSTraverse(0);
	Prim(st);
	Dijkstra(st, 0);
	int j, k;
	cin >> j >> k;
	char b[100];
	for (int q = 0; q < j; q++)
	{
		cin >> b[q];
	}
	ALGraph st1(b, j, k);
	Dijkstra(st, 0);
	return 0;
}
void Prim(Mgraph G)
{
	struct shortEdge s[100];
	int i;
	for (i = 1; i < G.vertexnum; i++)
	{
		s[i].lowcost = G.arc[0][i];
		s[i].adjvex = 0;
	}
	s[0].lowcost = 0;
	for (i = 1; i < G.vertexnum; i++)
	{
		int k;
		k = MinEdge(s, G.vertexnum);
		cout << "(" << k << s[k].adjvex << ")" << s[k].lowcost;
		s[k].lowcost = 0;
		for (int j = 1; j < G.vertexnum; j++)
		{
			if (G.arc[k][j] < s[j].lowcost)
			{
				s[j].lowcost = G.arc[k][j];
				s[j].adjvex = k;
			}
		}
	}
}//最小生成树
ALGraph::ALGraph(char a[], int n, int e)
{
	vertexnum = n;
	arcnum = e;
	for (int i = 0; i<vertexnum; i++)
	{
		adjlist[i].vertex = a[i];
		adjlist[i].firstedge = NULL;
	}
	for (int k = 0; k<arcnum; k++)
	{
		int i, j;
		cin >> i >> j;
		struct ArcNode *s;
		s = new ArcNode;
		s->adjvex = j;
		s->next = adjlist[i].firstedge;
		adjlist[i].firstedge = s;
	}
}//邻接表构造
Mgraph::Mgraph(int a[], int n, int e)
{
	vertexnum = n;
	arcnum = e;
	int i,j;
	for (i = 0; i < vertexnum; i++)
	{
		vertex[i] = a[i];
	}
	for (i = 0; i < vertexnum; i++)
	{
		for (j = 0; j < vertexnum; j++)
		{
			arc[i][j] = 0;
		}
	}
	for (int k = 0; k < arcnum; k++)
	{
		cin >> i >> j;
		arc[i][j] = 1;
		arc[j][i] = 1;
	}
}//构造
void Mgraph::DFSTraverse(int v)
{
	cout << vertex[v];
	visited[v] = 1;
	for (int j = 0; j < vertexnum; j++)
	{
		if (arc[v][j] == 1 && visited[v] == 0)
		{
			DFSTraverse(j);
		}
	}
}//深度优先
void Mgraph::BFSTraverse(int v)
{
	int Q[100];
	int front, rear;
	int j;
	front = rear = -1;
	cout << vertex[v];
	visited[v] = 1;
	Q[++rear] = v;
	while (front!=rear)
	{
		v = Q[++front];
		for (j = 0; j < vertexnum; j++)
		{
			if (arc[v][j] == 1 && visited[j] == 0)
			{
				cout << vertex[j];
				visited[j] = 1;
				Q[++rear] = j;
			}
		}
	}
}//广度优先
int MinEdge(struct shortEdge s[], int n)
{
	int min=10000000;
	for (int i = 1; i < n; i++)
	{
		if (s[i].lowcost != 0 && s[i].lowcost < min)
		{
			min = s[i].lowcost;
		}
	}
	return min;
}//找最小权值
void Dijkstra(Mgraph G, int v)
{
	int s[100];
	int i,num,k;
	int dist[100];
	int path[100];
	for (i = 0; i < G.vertexnum; i++)
	{
		dist[i] = G.arc[v][i];
		if (dist[i] != 65536)path[i] = G.vertex[v] + G.vertex[i];
		else path[i] = 0;
	}
	s[0] = v;
	dist[v] = 0;
	num = 1;
	while (num < G.vertexnum)
	{
		for (k = 0, i = 0; i < G.vertexnum; i++)
		{
			if ((dist[i] != 0) && (dist[i] < dist[k]))k = i;
		}
		cout << dist[k] << path[k];
		s[++num] = k;
		for (i = 0; i < G.vertexnum; i++)
		{
			if (dist[i] > dist[k] + G.arc[k][i])
			{
				dist[i] = dist[k] + G.arc[k][i];
				path[i] = path[k] + G.vertex[i];
			}
		}
		dist[k] = 0;
	}
}//最短路径
void TopSort(ALGraph G)
{
	ArcNode *p;
	int s[100];
	int top = -1;
	int count = 0;
	int i,j,k;
	for (i = 0; i < G.vertexnum; i++)
		if (G.adjlist[i].in == 0)
		{
			s[++top] = i;
		}
		while (top != -1)
		{
			j = s[top--];
			cout << G.adjlist[j].vertex;
			count++;
			p = G.adjlist[j].firstedge;
			while (p != NULL)
			{
				k = p->adjvex;
				G.adjlist[k].in--;
				if (G.adjlist[k].in == 0)s[++top] = k;
				p = p->next;
			}
		}
		if (count < G.vertexnum)
			cout << "有回路";
}//排序算法