#include<iostream>
#include<cstring>

using namespace std;

#define MAX 100000
#define MAXSIZE 100

class DirEdge{
public:
	int sPoint;
	int ePoint;
	int maxTime;
	int minTime;
	DirEdge(){
		this->sPoint = 0;
		this->ePoint = 0;
		maxTime = 0;
		minTime = MAX;
	}
};
class ShortEdge{
public:
	ShortEdge(){
		lowCost = 0;
		adjvex = 0;
	}
	ShortEdge(int lowCost,int adjvex){
		this->lowCost = lowCost;
		this->adjvex = adjvex;
	}
	int lowCost;
	int adjvex;
};
template<class DataType>
class MGraph{
public:
	MGraph(DataType a[],int n){
		this->vertexNum = n;
		this->arcNum = 0;
		//给顶点信息赋值
		this->vertex = new DataType[n];
		for(int i=0;i<n;i++){
			vertex[i] = a[i];
		}
		visited = new int[n];
		//初始化邻接边
		this->arc = new int*[n];
		for(int i=0;i<n;i++)
			this->arc[i] = new int[n];
		for(int i=0;i<n;i++){
			for(int j=0;j<n;j++){
				this->arc[i][j] = MAX;
			}
		}
	}
	void setArcPoint(int i,int j,int weight){
		char *a = "下溢";
		char *b = "上溢";
		if(i<0||j<0){
			throw a;
		}else if(i>=this->vertexNum||j>=this->vertexNum){
			throw b;
		}
		arc[i][j] = weight;
		this->arcNum++;
	}

	void DFSTraverse(){
		for(int i=0;i<vertexNum;i++){
			visited[i] = 0;
		}
		for(int i=0;i<vertexNum;i++){
			if(visited[i]==0){
				DFSTraverse(i);
			}
		}
		cout<<endl;
	}
	void BFSTraverse(){
		for(int i=0;i<vertexNum;i++){
			visited[i] = 0;
		}
		for(int i=0;i<vertexNum;i++){
			if(visited[i]==0){
				BFSTraverse(i);
			}
		}
		cout<<endl;
	}
	void display(){
		for(int i=0;i<this->vertexNum;i++){
			cout<<vertex[i]<<" ";
		}
		cout<<endl;
		for(int i=0;i<this->vertexNum;i++){
			for(int j=0;j<this->vertexNum;j++){
				cout<<this->arc[i][j]<<" ";
			}
			cout<<endl;
		}
	}
	//普里姆 
	void prim(){
		for(int i=0;i<this->vertexNum;i++){
			for(int j=0;j<this->vertexNum;j++){
				if(arc[i][j]!=0){
					arc[j][i] = arc[j][i];
				}else if(arc[j][i]!=0){
					arc[i][j] = arc[j][i];
				}
			}
		}
		ShortEdge *shortEdge = new ShortEdge[this->vertexNum];
		for(int i=0;i<this->vertexNum;i++){
			shortEdge[i].lowCost = this->arc[0][i];
		}
		shortEdge[0].lowCost = 0;int k = 0;
		for(int i=1;i<this->vertexNum;i++){
			k = minEdge(shortEdge);
			cout<<"("<<k<<","<<shortEdge[k].adjvex<<")"<<shortEdge[k].lowCost<<" ";
			shortEdge[k].lowCost = 0;
			for(int j=1;j<this->vertexNum;j++){
				if(arc[k][j]<shortEdge[j].lowCost){
					shortEdge[j].lowCost = arc[k][j];
					shortEdge[j].adjvex = k;
				}
			}
		}
		delete shortEdge;
	}
	//迪杰特斯拉 
	void Dijkstra(int v){
		int *dist = new int[this->vertexNum];
		int *s = new int[this->vertexNum];
		char **path = new char*[this->vertexNum];
		for(int i=0;i<this->vertexNum;i++)
			path[i] = new char[this->vertexNum*this->vertexNum*2+1];
		for(int i=0;i<this->vertexNum;i++){
			dist[i] = arc[v][i];
			if(dist[i]!=MAX){
				path[i][0] = v+'0';
				path[i][1] = '>';
				path[i][2] = i+'0';
				path[i][3] = '\0';
			}else{
				path[i][0] = v+'0';
				path[i][1] = '\0';
			}
		}
		s[0] = v;
		dist[v] = 0;
		int num = 1;
		while(num<this->vertexNum){
			int k=0;
			for(int i = 0;i<this->vertexNum;i++){
				if((dist[k]==0||k==v)&&dist[i]!=0){
					k = i;
				}else if(dist[i]!=0&&dist[i]<dist[k]&&i!=v){
					k = i;
				}
			}
			if(path[k][1]!='\0'){
				cout<<"("<<dist[k]<<")"<<path[k]<<endl;
			}
			s[num++] = k;
			for(int i=0;i<this->vertexNum;i++){
				if(dist[i]>dist[k]+arc[k][i]){
					dist[i] = dist[k]+arc[k][i];
					strcpy(path[i],path[k]);
					int length = strlen(path[i]);
					path[i][length++] = '>';
					path[i][length++] = i+'0';
					path[i][length++] = '\0';
				}
			}
			dist[k] = 0;
		}
		for(int i=0;i<this->vertexNum;i++){
			delete path[i];
		}
		delete s;
		delete dist;
	}
	//拓扑排序
	bool topSort(){
		int top = -1;
		int rear = -1;
		int count = 0;
		int *queue = new int[this->vertexNum];
		int *s = new int[this->vertexNum];
		int *in = new int[this->vertexNum];
		for(int i=0;i<this->vertexNum;i++){
			in[i] = 0;
		}
		for(int i=0;i<this->vertexNum;i++){
			for(int j=0;j<this->vertexNum;j++){
				if(arc[i][j]!=MAX){
					in[j]++;
				} 
			}
		}
		for(int i=0;i<this->vertexNum;i++){
			if(in[i]==0){
				queue[++top] = i;
			}
		}
		while(rear!=top){
			int j = queue[++rear];
			cout<<this->vertex[j]<<" ";
			count++;
			for(int k=0;k<this->vertexNum;k++){
				if(arc[j][k]!=MAX){
					in[k]--;
					if(in[k]==0){
						queue[++top] = k;
					}
				}
			}
		}
		cout<<endl; 
		if(count<this->vertexNum){
			cout<<"有回路"<<endl; 
			return 0;
		}
		delete queue;
		delete s;
		delete in;
		return 1;
	}
	//关键路径
	bool criticalPath(){
		int topStack = -1;
		int top = -1;
		int rear = -1;
		int topEdge = -1;
		int rearEdge = -1;
		int count = 0;
		int *queue = new int[this->vertexNum];
		DirEdge *queueEdge = new DirEdge[this->arcNum];
		int *stack = new int[this->vertexNum];
		int *s = new int[this->vertexNum];
		int *out = new int[this->vertexNum];
		int *in = new int[this->vertexNum];
		int *maxTime = new int[this->vertexNum];
		int *minTime = new int[this->vertexNum];
		//初始化 
		for(int i=0;i<this->vertexNum;i++){
			in[i] = 0;
			maxTime[i] = 0;
			minTime[i] = MAX;
		}
		for(int i=0;i<this->vertexNum;i++){
			out[i] = 0;
			for(int j=0;j<this->vertexNum;j++){
				if(arc[i][j]!=MAX){
					in[j]++;
					out[i]++;
					//计算最早时间
				}
			}
		}
		//将度为0的推入队列 
		for(int i=0;i<this->vertexNum;i++){
			if(in[i]==0){
				queue[++top] = i;
				stack[++topStack] = i;
			}
		}
		//最早时间 
		while(rear!=top){
			int j = queue[++rear];
			for(int i=0;i<this->vertexNum;i++){
				if(arc[j][i]!=MAX){
					queueEdge[++topEdge].sPoint = j;
					queueEdge[topEdge].ePoint = i;
					if(maxTime[i]<maxTime[j]+arc[j][i]) {
						maxTime[i] = maxTime[j]+arc[j][i];
					}
				}	
			} 
			count++;
			for(int k=0;k<this->vertexNum;k++){
				if(arc[j][k]!=MAX){
					in[k]--;
					if(in[k]==0){
						queue[++top] = k;
						stack[++topStack] = k;
					}
				}
			}
		}
		if(count<this->vertexNum){
			return 0;
		}
		
		//最迟时间 
		minTime[stack[topStack]] = maxTime[stack[topStack]];
		while(topStack!=0){
			int j = stack[topStack--];
			for(int i=0;i<this->vertexNum;i++){
				if(arc[i][j]!=MAX){
					if(minTime[i]>minTime[j]-arc[i][j]) {
						minTime[i] = minTime[j]-arc[i][j];
					}
				}
			}
		}
		
		//边的最早时间
		rearEdge = -1;
		while(rearEdge!=topEdge){
			queueEdge[++rearEdge].maxTime = maxTime[queueEdge[rearEdge].sPoint];
		}
		//边的最迟时间 
		rearEdge = -1;
		while(rearEdge!=topEdge){
			queueEdge[++rearEdge].minTime = minTime[queueEdge[rearEdge].ePoint]-arc[queueEdge[rearEdge].sPoint][queueEdge[rearEdge].ePoint];
		}
		disPlayPath(queueEdge,topEdge);
		delete minTime;
		delete maxTime;
		delete stack;
		delete queue;
		delete s;
		delete out;
		delete in;
		return 1;
	}
	~MGraph(){
		if(vertex!=NULL){
			delete vertex;
		}
		if(arc!=NULL){
			for(int i=0;i<this->vertexNum;i++){
				if(arc[i]!=NULL){
					delete arc[i];
				}
			}
		}
		if(visited!=NULL){
			delete visited;
		}
	}
private:
	DataType *vertex;
	int **arc;
	int *visited;
	int vertexNum,arcNum;
	
	int minEdge(ShortEdge const *shortEdge){
		int min = -1;
		for(int i=0;i<this->vertexNum;i++){
			if(shortEdge[i].lowCost==0){
				continue;
			}
			if(min==-1){
				min = i;
			}else if(shortEdge[i].lowCost<shortEdge[min].lowCost){
				min = i;
			}
		}
		return min;
	}
	void DFSTraverse(int v){
		cout<<vertex[v]<<" ";
		visited[v] = 1;
		for (int j=0;j<vertexNum;j++){
			if(arc[v][j]==1&&visited[j]==0){
				DFSTraverse(j);
			}
		}
	}
	void BFSTraverse(int v){
		int front,rear;
		front = rear = -1;
		int *queue = new int[vertexNum];
		cout<<vertex[v]<<" ";
		visited[v] = 1;
		queue[++rear] = v;
		while(front!=rear){
			v= queue[++front];
			for(int j=0;j<vertexNum;j++){
				if(arc[v][j]==1&&visited[j]==0){
					cout<<vertex[j]<<" ";
					visited[j] = 1;
					queue[++rear] = j;
				}
			}
		}
		delete queue;
	}
	
	//输出一条关键路径 
	void disPlayPath(DirEdge *queueEdge,int topEdge){
		int startPoint = queueEdge[0].sPoint;
		int lastPoint =  queueEdge[topEdge].ePoint;
		int rearEdge =0;
		int last = 0;
		cout<<startPoint<<" ";
		while(rearEdge<=topEdge){
			rearEdge++;
			if(queueEdge[last].ePoint!=queueEdge[rearEdge].sPoint){
				continue;
			}
			last = rearEdge;
			cout<<queueEdge[rearEdge].sPoint<<" ";
		}
		cout<<lastPoint<<endl;
	}
};
void test1(){
	int n;
	int e;
	cin>>n>>e;
	char *a = new char[n];
	for(int i=0;i<n;i++){
		cin>>a[i];
	}
	MGraph<char> *mG = new MGraph<char>(a,n);
	for(int i=0;i<e;i++){
		int m,k,w;
		cin>>m>>k>>w;
		try{
			mG->setArcPoint(m,k,w);
		}catch(char *a){
			cout<<a<<endl;
		}
	}
	//顶点信息
	cout<<"顶点信息和邻接矩阵"<<endl; 
	mG->display();
	//深度遍历 
	cout<<"深度信息"<<endl; 
	mG->DFSTraverse();
	//广度遍历 
	cout<<"广度信息"<<endl; 
	mG->BFSTraverse();
}
/*******************
测试用例 
	6
	9
	A B C D E F
	0 1 34
	0 5 19
	0 2 46
	1 4 12
	2 5 25
	2 3 17
	3 4 28
	3 5 25
	4 5 26
输出
 (5,0)19 (1,0)34 (4,1)12 (2,0)46 (3,2)17 
********************/
void test2(){
	int n;
	int e;
	cin>>n>>e;
	char *a = new char[n];
	for(int i=0;i<n;i++){
		cin>>a[i];
	}
	MGraph<char> *mG = new MGraph<char>(a,n);
	for(int i=0;i<e;i++){
		int m,k,w;
		cin>>m>>k>>w;
		try{
			mG->setArcPoint(m,k,w);
		}catch(char *a){
			cout<<a<<endl;
		}
	}
	//最小生成树
	cout<<"最小生成树:"<<endl;
	mG->prim(); 
}
/*************
测试用例 
5 7
A B C D E
0 1 10
0 3 30
0 4 100
1 2 50
2 4 10
3 4 60
3 2 20

输出 
0的最短路径
(10)0>1
(30)0>3
(50)0>3>2
(60)0>3>2>4
1的最短路径
(50)1>2
(60)1>2>4
2的最短路径
(10)2>4
3的最短路径
(20)3>2
(30)3>2>4
4的最短路径
*************/
void test3(){
	int n;
	int e;
	cin>>n>>e;
	char *a = new char[n];
	for(int i=0;i<n;i++){
		cin>>a[i];
	}
	MGraph<char> *mG = new MGraph<char>(a,n);
	for(int i=0;i<e;i++){
		int m,k,w;
		cin>>m>>k>>w;
		try{
			mG->setArcPoint(m,k,w);
		}catch(char *a){
			cout<<a<<endl;
		}
	}
	//最短路径
	cout<<"最短路径"<<endl;
	for(int i=0;i<n;i++){
		cout<<i<<"的最短路径"<<endl; 
		mG->Dijkstra(i); 
	}
}
/***********
7
10
A B C D E F G
0 2 1
0 4 1
1 2 1
1 3 1
2 4 1
2 5 1
2 6 1
3 5 1
5 6 1
4 6 1
输出
A B C D E F G
***********/
void test4(){
	int n;
	int e;
	cin>>n>>e;
	char *a = new char[n];
	for(int i=0;i<n;i++){
		cin>>a[i];
	}
	MGraph<char> *mG = new MGraph<char>(a,n);
	for(int i=0;i<e;i++){
		int m,k,w;
		cin>>m>>k>>w;
		try{
			mG->setArcPoint(m,k,w);
		}catch(char *a){
			cout<<a<<endl;
		}
	}
	//拓扑排序 
	cout<<"拓扑排序 "<<endl;
	mG->topSort(); 
}
/************
9 11
A B C D E F G H I
0 1 6
0 2 4
0 3 5
1 4 1
2 4 1
3 5 2
4 6 9
4 7 7
5 7 4
6 8 2
7 8 4
输出
0 1 4 6 8 
************/
void test5(){
	int n;
	int e;
	cin>>n>>e;
	char *a = new char[n];
	for(int i=0;i<n;i++){
		cin>>a[i];
	}
	MGraph<char> *mG = new MGraph<char>(a,n);
	for(int i=0;i<e;i++){
		int m,k,w;
		cin>>m>>k>>w;
		try{
			mG->setArcPoint(m,k,w);
		}catch(char *a){
			cout<<a<<endl;
		}
	}
	//关键路径 
	cout<<"关键路径 "<<endl;
	mG->criticalPath(); 
}
int main(){
	//test1();
	//test2();
	//test3();
	//test4(); 
	//test5();
	return 0;
}
