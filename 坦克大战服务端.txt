package net;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.LinkedList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author lol
 */
public class Servlet extends Thread {

    ServerSocket ss;
    int port;
    LinkedList<User> userList;
    boolean isStop = false;

    public Servlet(int port) {
        try {
            this.port = port;
            userList = new LinkedList();
            ss = new ServerSocket(port);
            System.out.println("服务器开启成功----" + InetAddress.getLocalHost().getHostAddress() + ":" + port);
            this.start();
        } catch (IOException ex) {
            System.out.println(ex.getMessage() + "--端口被占");
        }
    }

    public void close() {
        isStop = true;
        try {
            ss.close();
        } catch (IOException ex) {
            System.out.println("服务器关闭失败");
        }
    }

    public String getTank(int id) {
        User user = userList.get(id);
        String str = user.touchUping + "|" + user.touchDowning + "|" + user.touchRighting + "|" + user.touchLefting + "|" + user.touchAing + "|" + user.touchBing;
        return str;
    }

    public void setUser(int id, String str) {
        User user = userList.get(id);
        String temp = str.substring(0, str.indexOf(','));
        user.touchUping = Boolean.parseBoolean(temp);
        str = str.substring(str.indexOf(',') + 1);

        temp = str.substring(0, str.indexOf(','));
        user.touchDowning = Boolean.parseBoolean(temp);
        str = str.substring(str.indexOf(',') + 1);

        temp = str.substring(0, str.indexOf(','));
        user.touchRighting = Boolean.parseBoolean(temp);
        str = str.substring(str.indexOf(',') + 1);

        temp = str.substring(0, str.indexOf(','));
        user.touchLefting = Boolean.parseBoolean(temp);
        str = str.substring(str.indexOf(',') + 1);

        temp = str.substring(0, str.indexOf(','));
        user.touchAing = Boolean.parseBoolean(temp);
        str = str.substring(str.indexOf(',') + 1);

        temp = str.substring(0, str.indexOf(' '));
        user.touchBing = Boolean.parseBoolean(temp);
    }

    public int addTank() {
        userList.add(new User());
        return userList.size() - 1;
    }

    public int findFoe(int id) {
        int size = userList.size();
        for (int i = 0; i < size; i++) {
            if (i != id && !userList.get(i).isFight) {
                int root = new Random().nextInt(1000);
                userList.get(i).isFight = true;
                userList.get(i).foeId = id;
                userList.get(i).root = root;
                userList.get(id).isFight = true;
                userList.get(id).foeId = id;
                userList.get(id).root = root;
                return i;
            }
        }
        return -1;
    }

    @Override
    public void run() {
        while (!isStop) {
            try {
                Socket s = ss.accept();
                BufferedReader in = new BufferedReader(new InputStreamReader(s.getInputStream()));
                String str = in.readLine();
                //System.out.println(str);
                str = str.substring(str.indexOf('?') + 1);
                PrintWriter out = new PrintWriter(s.getOutputStream());
                out.printf("http 4 200\r\n");
                out.printf("Access-Control-Allow-Origin:*\r\n");
                out.printf("Accept-Charset:UTF-8\r\n");
                out.printf("Connection:close\r\n");
                out.printf("Content-Type:text/xml\r\n");
                out.printf("ResponseType:text/xml\r\n");
                out.printf("\r\n");
                if (str.contains("login")) {
                    System.out.println(s.getLocalAddress() + "登陆了游戏");
                    out.printf("%d\r\n", addTank());
                } else if (str.contains("tank")) {
                    //返回战斗数据
                    str = str.substring(str.indexOf(':') + 1);
                    String id = str.substring(0, str.indexOf(','));
                    str = str.substring(str.indexOf(',') + 1);
                    String foeId = str.substring(0, str.indexOf(','));
                    str = str.substring(str.indexOf(',') + 1);
                    int id2 = Integer.parseInt(id);
                    if (userList.size() > id2 && id2 >= 0) {
                        setUser(id2, str);
                        //System.out.println(getTank(Integer.parseInt(foeId)));
                        out.printf("GoodWeb|" + getTank(Integer.parseInt(foeId)) + "\r\n");
                    } else {
                        out.printf("BadWeb\r\n");
                    }
                } else if (str.contains("wait")) {
                    str = str.substring(str.indexOf(':') + 1, str.indexOf(' '));
                    if (Integer.parseInt(str) >= userList.size() || Integer.parseInt(str) < 0) {
                        out.printf("BadWeb\r\n");
                    } else if (userList.get(Integer.parseInt(str)).isFight) {
                        out.printf("Yes|%d|%d\r\n", userList.get(Integer.parseInt(str)).foeId, userList.get(Integer.parseInt(str)).root);
                    } else {
                        int id = findFoe(Integer.parseInt(str));
                        if (id != -1) {
                            out.printf("Yes|%d|%d\r\n", id, userList.get(Integer.parseInt(str)).root);
                            System.out.println(s.getLocalAddress() + "id:" + id + "和" + str + "找到了对手");
                        } else {
                            out.printf("No|%d|%d\r\n", id, userList.get(Integer.parseInt(str)).root);
                        }
                    }
                }
                out.close();
                s.close();
            } catch (IOException ex) {
                System.out.println(ex.getMessage());
            }
        }
    }

    class User {

        public boolean isAlive = true;
        public boolean touchUping = false;
        public boolean touchDowning = false;
        public boolean touchRighting = false;
        public boolean touchLefting = false;
        public boolean touchAing = false;
        public boolean touchBing = false;
        public boolean isFight = false;
        public int foeId = -1;
        public int root = -1;
    }
}
